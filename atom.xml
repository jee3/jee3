<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title></title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jee3.github.io/"/>
  <updated>2020-06-04T11:37:18.599Z</updated>
  <id>http://jee3.github.io/</id>
  
  <author>
    <name>Jee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[object Object]</title>
    <link href="http://jee3.github.io/FE-interview-base/"/>
    <id>http://jee3.github.io/FE-interview-base/</id>
    <published>2020-06-04T11:37:18.599Z</published>
    <updated>2020-06-04T11:37:18.599Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>利用Blob类文件对象进行有权限校验的文件下载</title>
    <link href="http://jee3.github.io/download-files-via-blob/"/>
    <id>http://jee3.github.io/download-files-via-blob/</id>
    <published>2020-06-04T01:00:00.000Z</published>
    <updated>2020-06-04T07:42:52.333Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;不用&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;标签怎么实现下载功能呢？&lt;/p&gt;
&lt;p&gt;我们知道，一般情况下，前端要去请求下载一个文件，一般是直接把地址写在&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;标签里面，可是如果我想在发送请求的时候就直接携带 tokne 校验身份呢？&lt;/p&gt;
&lt;p&gt;本文就来介绍一种利用&lt;code&gt;Blob&lt;/code&gt;来实现下载功能的方式。&lt;/p&gt;
&lt;p&gt;直接上代码&lt;/p&gt;
    
    </summary>
    
    
      <category term="FE" scheme="http://jee3.github.io/categories/FE/"/>
    
      <category term="Axios" scheme="http://jee3.github.io/categories/FE/Axios/"/>
    
    
      <category term="FE" scheme="http://jee3.github.io/tags/FE/"/>
    
      <category term="Axios" scheme="http://jee3.github.io/tags/Axios/"/>
    
  </entry>
  
  <entry>
    <title>React多个系统之间登录登出逻辑的实现</title>
    <link href="http://jee3.github.io/React%E5%A4%9A%E4%B8%AA%E7%B3%BB%E7%BB%9F%E4%B9%8B%E9%97%B4%E7%99%BB%E5%BD%95%E7%99%BB%E5%87%BA%E9%80%BB%E8%BE%91%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://jee3.github.io/React%E5%A4%9A%E4%B8%AA%E7%B3%BB%E7%BB%9F%E4%B9%8B%E9%97%B4%E7%99%BB%E5%BD%95%E7%99%BB%E5%87%BA%E9%80%BB%E8%BE%91%E7%9A%84%E5%AE%9E%E7%8E%B0/</id>
    <published>2020-06-02T02:12:55.000Z</published>
    <updated>2020-06-02T08:56:10.500Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍 React 登录登出逻辑的一种实现方法。&lt;/p&gt;
&lt;p&gt;用户在注册页面进行注册表单提交，正确提交信息后，进入登录页面，登录页面检测用户是否已经登录（此处有多种方法，可以检测 cookie，我用的是检测 localStorage 是否有我登录时存的一个值）。&lt;/p&gt;
&lt;p&gt;如果直接在地址栏输入地址，检测到未登录状态，则返回到登录页面。&lt;/p&gt;
    
    </summary>
    
    
      <category term="FE" scheme="http://jee3.github.io/categories/FE/"/>
    
      <category term="React" scheme="http://jee3.github.io/categories/FE/React/"/>
    
    
      <category term="FE" scheme="http://jee3.github.io/tags/FE/"/>
    
      <category term="React" scheme="http://jee3.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>一次axios为什么会发两次请求？</title>
    <link href="http://jee3.github.io/one-axios-two-requests/"/>
    <id>http://jee3.github.io/one-axios-two-requests/</id>
    <published>2020-05-24T01:00:00.000Z</published>
    <updated>2020-06-04T08:57:26.267Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在开发过程中，可能会遇到代码里面只有一个 axios，但是打开控制台的网络，却发现有两次请求，如下图所示： &lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1gffb2sgqadj30zo0sugsu.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;点击其中一个请求，发现&lt;code&gt;method&lt;/code&gt;并不是指定的&lt;code&gt;GET&lt;/code&gt;请求，而是&lt;code&gt;OPTIONS&lt;/code&gt;，那是为什么呢？&lt;/p&gt;
&lt;p&gt;原来, 允许跨域的时候, 不只是服务端设置&lt;code&gt;Access-Control-Allow-Origin: *&lt;/code&gt;，这是普通的请求，除此之外, 还一种叫请求叫&lt;strong&gt;preflighted request&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="FE" scheme="http://jee3.github.io/categories/FE/"/>
    
      <category term="Axios" scheme="http://jee3.github.io/categories/FE/Axios/"/>
    
    
      <category term="FE" scheme="http://jee3.github.io/tags/FE/"/>
    
      <category term="Axios" scheme="http://jee3.github.io/tags/Axios/"/>
    
  </entry>
  
  <entry>
    <title>console.log失效了？</title>
    <link href="http://jee3.github.io/console-log%E5%A4%B1%E6%95%88%E4%BA%86%EF%BC%9F/"/>
    <id>http://jee3.github.io/console-log%E5%A4%B1%E6%95%88%E4%BA%86%EF%BC%9F/</id>
    <published>2020-05-20T01:00:00.000Z</published>
    <updated>2020-06-04T08:59:03.215Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;console.log 作为前端工程师非常值得信赖的调试工具，居然失效了？？？没想到啊没想到，console.log 这么个浓眉大眼的家伙，居然也…&lt;/p&gt;
&lt;p&gt;先直接上代码&lt;/p&gt;
    
    </summary>
    
    
      <category term="FE" scheme="http://jee3.github.io/categories/FE/"/>
    
      <category term="React" scheme="http://jee3.github.io/categories/FE/React/"/>
    
    
      <category term="FE" scheme="http://jee3.github.io/tags/FE/"/>
    
      <category term="React" scheme="http://jee3.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React中如何避免子组件的循环渲染</title>
    <link href="http://jee3.github.io/React%E4%B8%AD%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E5%AD%90%E7%BB%84%E4%BB%B6%E7%9A%84%E5%BE%AA%E7%8E%AF%E6%B8%B2%E6%9F%93/"/>
    <id>http://jee3.github.io/React%E4%B8%AD%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E5%AD%90%E7%BB%84%E4%BB%B6%E7%9A%84%E5%BE%AA%E7%8E%AF%E6%B8%B2%E6%9F%93/</id>
    <published>2020-05-12T02:12:55.000Z</published>
    <updated>2020-06-03T03:33:14.569Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在 React 开发中，有时候会遇到子组件循环渲染导致闪屏的问题，那如何避免呢？&lt;/p&gt;
&lt;p&gt;以下代码实现了通过点击父表格某一行的按钮，弹出子表格的模态框以显示子表格及其数据（原代码是父表格有两个按钮，分别弹出不同的子表格，不是本节重点，所以代码没有写那一部分）&lt;/p&gt;
    
    </summary>
    
    
      <category term="FE" scheme="http://jee3.github.io/categories/FE/"/>
    
      <category term="Ant-design" scheme="http://jee3.github.io/categories/FE/Ant-design/"/>
    
      <category term="React" scheme="http://jee3.github.io/categories/FE/React/"/>
    
    
      <category term="FE" scheme="http://jee3.github.io/tags/FE/"/>
    
      <category term="Ant-design" scheme="http://jee3.github.io/tags/Ant-design/"/>
    
      <category term="React" scheme="http://jee3.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Webpack打包优化</title>
    <link href="http://jee3.github.io/webpack-optimization/"/>
    <id>http://jee3.github.io/webpack-optimization/</id>
    <published>2020-05-09T01:00:00.000Z</published>
    <updated>2020-06-04T08:57:52.112Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;前端有一个很常见的需求，就是要把 js 打的包切割，这样用户在访问的时候，可以并行加载多个 js 包，大大提高访问速度，缩短首屏白屏时间。&lt;/p&gt;
&lt;h1 id=&quot;optimization-splitChunks&quot;&gt;&lt;a href=&quot;#optimization-splitChunks&quot; class=&quot;headerlink&quot; title=&quot;optimization.splitChunks&quot;&gt;&lt;/a&gt;optimization.splitChunks&lt;/h1&gt;&lt;p&gt;直接上代码&lt;/p&gt;
    
    </summary>
    
    
      <category term="FE" scheme="http://jee3.github.io/categories/FE/"/>
    
      <category term="Webpack" scheme="http://jee3.github.io/categories/FE/Webpack/"/>
    
    
      <category term="FE" scheme="http://jee3.github.io/tags/FE/"/>
    
      <category term="Webpack" scheme="http://jee3.github.io/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>Upload组件-文件选择后不立即上传</title>
    <link href="http://jee3.github.io/Upload%E7%BB%84%E4%BB%B6-%E6%96%87%E4%BB%B6%E9%80%89%E6%8B%A9%E5%90%8E%E4%B8%8D%E7%AB%8B%E5%8D%B3%E4%B8%8A%E4%BC%A0/"/>
    <id>http://jee3.github.io/Upload%E7%BB%84%E4%BB%B6-%E6%96%87%E4%BB%B6%E9%80%89%E6%8B%A9%E5%90%8E%E4%B8%8D%E7%AB%8B%E5%8D%B3%E4%B8%8A%E4%BC%A0/</id>
    <published>2020-05-07T07:53:37.000Z</published>
    <updated>2020-06-03T03:33:14.582Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;很多时候我们在用 Upload 组件上传文件的时候，选择文件后&lt;strong&gt;并不想立刻上传&lt;/strong&gt;，而是要&lt;strong&gt;等待其他表单内容一起上传&lt;/strong&gt;。方法就是不在 action 里面写上传地址，先将文件对象存起来，等 submit 按钮点击事件触发的时候再一起提交到请求地址里面。&lt;/p&gt;
&lt;p&gt;直接上代码&lt;/p&gt;
    
    </summary>
    
    
      <category term="FE" scheme="http://jee3.github.io/categories/FE/"/>
    
      <category term="Ant-design" scheme="http://jee3.github.io/categories/FE/Ant-design/"/>
    
      <category term="React" scheme="http://jee3.github.io/categories/FE/React/"/>
    
    
      <category term="FE" scheme="http://jee3.github.io/tags/FE/"/>
    
      <category term="Ant-design" scheme="http://jee3.github.io/tags/Ant-design/"/>
    
      <category term="React" scheme="http://jee3.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React优化首屏加载时间之异步加载</title>
    <link href="http://jee3.github.io/React-first-screen-loading-optimization/"/>
    <id>http://jee3.github.io/React-first-screen-loading-optimization/</id>
    <published>2020-04-18T01:00:00.000Z</published>
    <updated>2020-06-04T05:59:57.443Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;首屏白屏时间过长一直是前端优化的主要内容之一，此次优化采用了异步加载的方法。也就是用户输入网址进入首页的时候，只加载首页内容。其他页面等用户进入的时候再加载。&lt;/p&gt;
    
    </summary>
    
    
      <category term="FE" scheme="http://jee3.github.io/categories/FE/"/>
    
      <category term="React" scheme="http://jee3.github.io/categories/FE/React/"/>
    
      <category term="性能优化" scheme="http://jee3.github.io/categories/FE/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="FE" scheme="http://jee3.github.io/tags/FE/"/>
    
      <category term="React" scheme="http://jee3.github.io/tags/React/"/>
    
      <category term="性能优化" scheme="http://jee3.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>React-router-dom的原理和使用介绍</title>
    <link href="http://jee3.github.io/react-router-dom-introduction/"/>
    <id>http://jee3.github.io/react-router-dom-introduction/</id>
    <published>2020-04-08T01:00:00.000Z</published>
    <updated>2020-06-04T06:00:20.985Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;路由配置一直是单页面应用里面很重要的一部分，本文就简单介绍一下&lt;/p&gt;
&lt;h1 id=&quot;basename-为所有地址添加基础路径&quot;&gt;&lt;a href=&quot;#basename-为所有地址添加基础路径&quot; class=&quot;headerlink&quot; title=&quot;basename 为所有地址添加基础路径&quot;&gt;&lt;/a&gt;basename 为所有地址添加基础路径&lt;/h1&gt;&lt;p&gt;这是一个很常见的需求，当产品要上线的时候，一个域名下有多个系统，那就需要在不同系统下分别统一路径。比如&lt;code&gt;www.example.com/A/testA/&lt;/code&gt;与&lt;code&gt;www.example.com/B/testB/&lt;/code&gt;，这样后端部署的时候也会很容易。&lt;/p&gt;
&lt;p&gt;配置也很简单，只需要在&lt;code&gt;BrowserRouter&lt;/code&gt;加上&lt;code&gt;basename&lt;/code&gt;属性就行了&lt;/p&gt;
    
    </summary>
    
    
      <category term="FE" scheme="http://jee3.github.io/categories/FE/"/>
    
      <category term="React" scheme="http://jee3.github.io/categories/FE/React/"/>
    
    
      <category term="FE" scheme="http://jee3.github.io/tags/FE/"/>
    
      <category term="React" scheme="http://jee3.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>自定义浏览器自动填充input框的样式</title>
    <link href="http://jee3.github.io/browser-autofill-input-style/"/>
    <id>http://jee3.github.io/browser-autofill-input-style/</id>
    <published>2020-03-20T01:00:00.000Z</published>
    <updated>2020-06-04T05:58:19.797Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;无论我们在用 Antd 的&lt;code&gt;Input&lt;/code&gt;组件，还是原生的 input 标签，都会遇到这样一个问题：我们在设置好了普通的 input 样式的时候，在&lt;strong&gt;浏览器自动填充用户名和密码&lt;/strong&gt;的时候，input 框出现了非预期的样式（Antd 是灰色背景，原生的是黄色背景）。&lt;/p&gt;
&lt;p&gt;那么，怎么才能实现想要的效果呢？&lt;/p&gt;
&lt;p&gt;直接上代码：&lt;/p&gt;
    
    </summary>
    
    
      <category term="FE" scheme="http://jee3.github.io/categories/FE/"/>
    
      <category term="CSS" scheme="http://jee3.github.io/categories/FE/CSS/"/>
    
    
      <category term="FE" scheme="http://jee3.github.io/tags/FE/"/>
    
      <category term="CSS" scheme="http://jee3.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Ant-design踩过的那些坑</title>
    <link href="http://jee3.github.io/Ant-design%E8%B8%A9%E8%BF%87%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91/"/>
    <id>http://jee3.github.io/Ant-design%E8%B8%A9%E8%BF%87%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91/</id>
    <published>2020-02-19T16:00:00.000Z</published>
    <updated>2020-06-03T03:33:14.569Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Ant-design 是 React 项目中主流的前端 UI 框架，虽然文档较为全面，但是在使用中还是有很多坑的，本文就集中整理一下。&lt;/p&gt;
&lt;h1 id=&quot;按需加载&quot;&gt;&lt;a href=&quot;#按需加载&quot; class=&quot;headerlink&quot; title=&quot;按需加载&quot;&gt;&lt;/a&gt;按需加载&lt;/h1&gt;&lt;p&gt;.babelrc 文件&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;plugins&quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;@babel/plugin-proposal-class-properties&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;import&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;libraryName&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;antd&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;libraryDirectory&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;es&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;style&quot;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="FE" scheme="http://jee3.github.io/categories/FE/"/>
    
      <category term="Ant-design" scheme="http://jee3.github.io/categories/FE/Ant-design/"/>
    
    
      <category term="FE" scheme="http://jee3.github.io/tags/FE/"/>
    
      <category term="Ant-design" scheme="http://jee3.github.io/tags/Ant-design/"/>
    
  </entry>
  
  <entry>
    <title>React倒计时</title>
    <link href="http://jee3.github.io/react-setInterval/"/>
    <id>http://jee3.github.io/react-setInterval/</id>
    <published>2020-02-12T01:00:00.000Z</published>
    <updated>2020-06-04T07:46:05.556Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在开发中，我们常会遇到倒计时的需求，今天用 react 写一个倒计时，实现在某个系统中，定时检验 token 是否有效，适用于试用帐户等场景。&lt;/p&gt;
&lt;p&gt;代码很简单，只不过要注意区分 React 的生命周期，在组件未挂载的时候，也就是&lt;code&gt;componentWillMount&lt;/code&gt;生命周期中，发送请求，并添加相应的响应拦截。在&lt;code&gt;componentDidMount&lt;/code&gt;生命周期中不断发送请求，在&lt;code&gt;componentWillUnmount&lt;/code&gt;生命周期中&lt;code&gt;clearInterval&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;直接上代码&lt;/p&gt;
    
    </summary>
    
    
      <category term="FE" scheme="http://jee3.github.io/categories/FE/"/>
    
      <category term="React" scheme="http://jee3.github.io/categories/FE/React/"/>
    
    
      <category term="FE" scheme="http://jee3.github.io/tags/FE/"/>
    
      <category term="React" scheme="http://jee3.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>《React——引领未来的用户界面开发框架》总结</title>
    <link href="http://jee3.github.io/React-%E5%BC%95%E9%A2%86%E6%9C%AA%E6%9D%A5%E7%9A%84%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/"/>
    <id>http://jee3.github.io/React-%E5%BC%95%E9%A2%86%E6%9C%AA%E6%9D%A5%E7%9A%84%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/</id>
    <published>2020-01-21T16:00:00.000Z</published>
    <updated>2020-05-27T11:15:49.865Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;所有代码示例：&lt;a href=&quot;http://git.io/vlcpa&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://git.io/vlcpa&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;4-数据流&quot;&gt;&lt;a href=&quot;#4-数据流&quot; class=&quot;headerlink&quot; title=&quot;4 数据流&quot;&gt;&lt;/a&gt;4 数据流&lt;/h1&gt;&lt;h2 id=&quot;PropTypes&quot;&gt;&lt;a href=&quot;#PropTypes&quot; class=&quot;headerlink&quot; title=&quot;PropTypes&quot;&gt;&lt;/a&gt;PropTypes&lt;/h2&gt;&lt;p&gt;提供了一种验证 props 的方式&lt;/p&gt;
&lt;h2 id=&quot;State&quot;&gt;&lt;a href=&quot;#State&quot; class=&quot;headerlink&quot; title=&quot;State&quot;&gt;&lt;/a&gt;State&lt;/h2&gt;&lt;p&gt;千万不能直接修改 this.state，永远记得要通过 this.setState 方法修改&lt;/p&gt;
&lt;p&gt;state 中应只保存最简单的数据，不要保存计算出的值&lt;/p&gt;
&lt;p&gt;不要尝试把 props 复制到 state 中，要尽可能将 props 当作数据源&lt;/p&gt;
&lt;p&gt;当不需要内部状态、refs 和生命周期函数时，将组件变成函数组件可以减少冗余和复杂性&lt;/p&gt;
    
    </summary>
    
    
      <category term="FE" scheme="http://jee3.github.io/categories/FE/"/>
    
      <category term="React" scheme="http://jee3.github.io/categories/FE/React/"/>
    
    
      <category term="FE" scheme="http://jee3.github.io/tags/FE/"/>
    
      <category term="React" scheme="http://jee3.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>用react-spring做伸缩动画特效</title>
    <link href="http://jee3.github.io/react-spring/"/>
    <id>http://jee3.github.io/react-spring/</id>
    <published>2020-01-15T01:00:00.000Z</published>
    <updated>2020-06-04T08:59:43.545Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文主要讲一下&lt;code&gt;react-spring&lt;/code&gt;的用法，顺便说一下如何实现比浏览器规定的最小字体还要小的字体～&lt;/p&gt;
&lt;p&gt;在开发中前端经常需要写一些特效，而伸缩特效又是其中较为常见的。但是单纯的伸缩特效又不够有吸引力，很直白，很僵硬。所以我们会采用&lt;strong&gt;spring&lt;/strong&gt;这种弹簧特效，会更加生动。比如说，你要将一个 div 放大到 1.5 倍，spring 在放大过程中会放大到 1.6（你可以自己设定），然后在 1.5 上下波动，逐渐稳定到 1.5。&lt;/p&gt;
&lt;p&gt;在 react 中也有一个库，叫 react-spring，一起来看看吧～&lt;/p&gt;
    
    </summary>
    
    
      <category term="FE" scheme="http://jee3.github.io/categories/FE/"/>
    
      <category term="React" scheme="http://jee3.github.io/categories/FE/React/"/>
    
    
      <category term="FE" scheme="http://jee3.github.io/tags/FE/"/>
    
      <category term="React" scheme="http://jee3.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Redux和React-redux小结</title>
    <link href="http://jee3.github.io/redux-and-react-redux/"/>
    <id>http://jee3.github.io/redux-and-react-redux/</id>
    <published>2019-12-26T01:00:00.000Z</published>
    <updated>2020-06-04T11:30:33.985Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;
        
      
    
    </summary>
    
    
      <category term="FE" scheme="http://jee3.github.io/categories/FE/"/>
    
      <category term="React" scheme="http://jee3.github.io/categories/FE/React/"/>
    
    
      <category term="FE" scheme="http://jee3.github.io/tags/FE/"/>
    
      <category term="React" scheme="http://jee3.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Git 进阶</title>
    <link href="http://jee3.github.io/git-pro/"/>
    <id>http://jee3.github.io/git-pro/</id>
    <published>2019-12-17T16:00:00.000Z</published>
    <updated>2020-06-02T12:09:23.057Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;HEAD 严格来说不是指向提交，而是指向 master，master 才是指向提交的，所以，HEAD 指向的就是当前分支。&lt;/p&gt;
&lt;h1 id=&quot;fatal-Could-not-read-from-remote-repository-的解决办法&quot;&gt;&lt;a href=&quot;#fatal-Could-not-read-from-remote-repository-的解决办法&quot; class=&quot;headerlink&quot; title=&quot;fatal: Could not read from remote repository.的解决办法:&quot;&gt;&lt;/a&gt;fatal: Could not read from remote repository.的解决办法:&lt;/h1&gt;&lt;p&gt;查看远端地址 &lt;code&gt;git remote –v&lt;/code&gt; 查看配置 &lt;code&gt;git config --list&lt;/code&gt; &lt;code&gt;git status&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="http://jee3.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="http://jee3.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript执行机制</title>
    <link href="http://jee3.github.io/javascript-execution-mechanism/"/>
    <id>http://jee3.github.io/javascript-execution-mechanism/</id>
    <published>2019-11-23T01:00:00.000Z</published>
    <updated>2020-06-04T11:15:36.260Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript-执行（一）：Promise-里的代码为什么比-setTimeout-先执行？&quot;&gt;&lt;a href=&quot;#JavaScript-执行（一）：Promise-里的代码为什么比-setTimeout-先执行？&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 执行（一）：Promise 里的代码为什么比 setTimeout 先执行？&quot;&gt;&lt;/a&gt;JavaScript 执行（一）：Promise 里的代码为什么比 setTimeout 先执行？&lt;/h1&gt;&lt;p&gt;宏观任务的队列就相当于事件循环。在宏观任务中，JavaScript 的 Promise 还会产生异步代码，JavaScript 必须保证这些异步代码在一个宏观任务中完成，因此，每个宏观任务中又包含了一个微观任务队列&lt;/p&gt;
&lt;p&gt;Promise 永远在队列尾部添加微观任务。setTimeout 等宿主 API，则会添加宏观任务。&lt;/p&gt;
&lt;p&gt;Event Loop &lt;img src=&quot;https://tva1.sinaimg.cn/large/006y8mN6gy1g7ucnloq68j30vw0qo41x.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="FE" scheme="http://jee3.github.io/categories/FE/"/>
    
      <category term="JS原理" scheme="http://jee3.github.io/categories/FE/JS%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="FE" scheme="http://jee3.github.io/tags/FE/"/>
    
      <category term="JS原理" scheme="http://jee3.github.io/tags/JS%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>《Javascript高级程序设计》总结</title>
    <link href="http://jee3.github.io/JS%E9%AB%98%E7%A8%8B/"/>
    <id>http://jee3.github.io/JS%E9%AB%98%E7%A8%8B/</id>
    <published>2019-11-22T16:00:00.000Z</published>
    <updated>2020-06-04T10:42:46.625Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;复制基本类型值的时候，会新创建一个。复制引用类型值的时候，只是复制指针，指针指向堆中同一个对象。&lt;/p&gt;
&lt;h1 id=&quot;5-引用类型&quot;&gt;&lt;a href=&quot;#5-引用类型&quot; class=&quot;headerlink&quot; title=&quot;5 引用类型&quot;&gt;&lt;/a&gt;5 引用类型&lt;/h1&gt;&lt;p&gt;到底是不是数组，可以用.isArray()，instanceof 在多个框架（两个以上全局执行环境）就不好用了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/006y8mN6gy1g8mz1tcg1mj30ew0dg75n.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;array.push():添加到数组末尾，返回新长度 array.pop():返回数组最后一一项 array.shift():移除并返回第一项 array.unshift():前端添加任意项，返回新长度&lt;/p&gt;
&lt;p&gt;sort()排序会将‘15’放在‘5’前面，因为比较第一个字符。可以接收一个用于比较的函数&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;compare&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;value1, value2&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; value2 - value1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr.sort(compare);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="FE" scheme="http://jee3.github.io/categories/FE/"/>
    
      <category term="JS原理" scheme="http://jee3.github.io/categories/FE/JS%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="FE" scheme="http://jee3.github.io/tags/FE/"/>
    
      <category term="JS原理" scheme="http://jee3.github.io/tags/JS%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>CSS单位</title>
    <link href="http://jee3.github.io/css-unit/"/>
    <id>http://jee3.github.io/css-unit/</id>
    <published>2019-11-02T16:00:00.000Z</published>
    <updated>2020-06-02T12:04:37.678Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;
        
      
    
    </summary>
    
    
      <category term="FE" scheme="http://jee3.github.io/categories/FE/"/>
    
      <category term="CSS" scheme="http://jee3.github.io/categories/FE/CSS/"/>
    
    
      <category term="FE" scheme="http://jee3.github.io/tags/FE/"/>
    
      <category term="CSS" scheme="http://jee3.github.io/tags/CSS/"/>
    
  </entry>
  
</feed>
